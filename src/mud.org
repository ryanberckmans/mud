#+TAGS: BUILDING(b) STORY(s) TWISTED(t)

* Stuff to talk to Carl about 6/30
** online versus hardcoded
*** group creation/deletion/relationships online? 
**** easier and almost as useful to hardcode this, and have no db
**** note: hardcore parent/child group relationships, too
**** => store mob's groups in db and nothing else?
**** won't allow any other instanced entity to have a list of groups => this is fine for now
**** therefore "groups aren't data"
*** commands online isn't worth it
**** very little homogeneity complicates data model
**** cmd modification is, compared to use, rare
**** therefore "cmds aren't data"
*** mob/zone-to-prod workflow
**** start mud in build-mode
**** create a zone -> zone 15
**** mob new     // in zone 15 mob library
***** certain attribs default, such as owning zone
***** set attribs
***** save mob    // saves static, inst default data
**** mob deploy  // in zone 15 deploy library
***** default inst, deply attribs // e.g. default to 1 mob, 100% probability, state standing, deployment owning zone
***** set deploy data // e.g. # mobs, scripts/procs for this deploy group, deploy trigger
***** set inst data   // e.g. start location(s)
***** save deployment // into deployment table
***** general idea: any value can have probalistic partitioning
**** zone deploy
***** schedule once instance of new zone for dp, same as mob deploy, saves into deployment table
**** start mud in run-mode
***** mud loads zone deployments, sees new zone dp
***** zone dp loads mob dps, sees new mob dp
***** when dp triggers, our new mob spawns
**** problem: this path is fine for new worlds, but 99% of time we load an existing world with existing instances
***** => deploy tracking/engines

* Tasks
** DONE fix unit tests
   CLOSED: [2009-06-29 Mon 20:36]
** TODO upgrade sqlalchemy
** DONE implement clientTracker
   CLOSED: [2009-06-30 Tue 23:39]
** TODO update ValueSelector to permit invalidSelectionCallback=None
*** allows CmdMap to fail normally without explicitly throwing AbandonCallback
** TODO make cmdMap case insensitive
** TODO fix cmdMap bug
** TODO allow prioritization of mods
** TODO switch cmds to clientTracker
** TODO private signals
** TODO clientTracker provides private signals
** TODO logging
** TODO enhance colors; code to push/pop color state, enables "make color cyan, then go back to whatever it was"
** TODO investigate sqlalchemy blocking/defer to thread/session issue :TWISTED:
** TODO convert is-functionals to non-assert, check return values. enables support of assert isString( x ) or isInt( x )
** TODO implement db layer
*** TODO implement tests for returned session object
*** TODO impl db config mods for BETA, STATIC, and INSTANCE
*** TODO write sql to bootstrap db to work with config
** DONE change python-mode to correct version
   CLOSED: [2009-06-29 Mon 23:24]
** TODO hardcoded groups, and mobs can't have groups                  :STORY:
** TODO mobs can have groups                                          :STORY:
** TODO commands exist and wrap callbacks in validation chain :STORY:TWISTED:
** TODO commands have list of allowed/denied groups           :STORY:TWISTED:
** DONE prompts
   CLOSED: [2009-07-02 Thu 23:28]
** TODO fill-in-the-blanks form widget
** TODO input string widget
** DONE value selector
   CLOSED: [2009-07-02 Thu 23:28]
** TODO zone templates, saving to db                                  :STORY:
** TODO zone deployments, saving to db, but no instances              :STORY:
** TODO zone deployments trigger, saving instances to db              :STORY:
** TODO mob templates, saving to db                                   :STORY:
** TODO mob deployments, saving to db, but no instances               :STORY:
** TODO mob deployments trigger, saving instances to db               :STORY:
** TODO code mobs, where we have templates, and everything else is permanent :STORY:
** TODO code rooms like mobs, with no concept of zones yet            :STORY:
** TODO code "assume control of mob X"                                :STORY:
** TODO code basic zones                                              :STORY:
** TODO code "10.5.37" reference thing                                :STORY:

* Ancillary Tasks
** DONE update __init__ strings to "package initialized" instead of hi from...
   CLOSED: [2009-06-29 Mon 20:37]

** TODO convert ftm git to pure repository

* migrating to SOA using twisted
** service template
*** we don't really need a svc template
**** mud requires mods
**** most services don't require mods
**** not much shared code
** twisted services
*** twisted xmlrpc - can only receive and return basic datatypes
*** endpoint configuration files, i.e. how to tell what url:port to point at
*** TODO ? xmlrpc ssl
*** TODO ? how do we authenticate xmlrpc
*** what role does mods-enabled have in SOA?
**** allows plugging of features, even if features are remote services 
**** mods are really just libraries which may have no dependents
**** a mod or library may point to a remote svc, but this is abstracted from the downstream
*** what type of features should be mods?
**** xmlrpc supports only basic datatypes, so features requiring tossing around complex data types shouldn't be mods.
**** features with many upstreams can be mods, but then they may not be upstreams
***** e.g. combat could be a mod, but it relies on equip, spell affects, etc, and how do we know something won't rely on combat?

* migrating away from root c++
** why?
*** twistd
*** replacing c++ socket server with twisted service
** features that need migration
*** socket server
*** tick loop - what does this look like in SOA?
**** naively, just transfers data from socket server to command handler

* important considerations
** builder tools
** starting content ahead of time
** single dota zone, to flesh out builder tools/mechanics
** multiple worlds <=> multiple servers ?
*** medlink world
*** global commands spanning worlds

