
* names:
** general permissions system
** permission service

* motivation: allow access to X if Y
** allow access to X, where X is
*** an entire command
**** purge
**** restart
**** high level spell
*** a subcommand
**** spell 'create' creates stronger stuff if Y
*** a class of data
**** purge jim iff Y
**** edit room iff Y
** allow access to X if Y, where Y is:
 
* use case observations
** definitely some common themes disguised as distinct use cases
** permissions can be arbitrary boolean expressions. what else?
*** if it is my zone "or" I have global zone access
*** if I am a level 5 cleric or a level 10 mage
*** if I am level 10 engineering, or (I have a rod of engineering wielded and 1000 mana)
** how much of functionality should be captured by library, and how much of it can be handled by customers combining library primitives
*** would you want to have a ">1000 mana" permission to cast a spell
**** yes perspective ?
***** could see using permissions library to declare private permissions, like hasMana(1000)
***** then what does the perms library offer? why not just write a hasMana() function, or a private mobChecks lib, with no dependencies?
**** no  perspective ?
***** permissions lib doesn't contribute much to hasMana(), might as well be private lib.
***** to what degree do we want permissions to be data-driven, or general? => what does perms do, and what doesn't it do?


* possible roles for permissions system
** infrastructure for commands/systems whose functionality depends on a permissions algorithm
** option: only support features that are completely invisible if user fails permsalg
*** purge doesn't show up as cmd if you're not in purge-group
*** high level spell doesn't show up if you can't cast it
*** this option decouples the groups system from permissions system
*** this almost seems like an addition to the CmdMap API: addCmdIf( cmd, callback, boolean ) => this is dumb, just if X: addCmd
**** allows for useful private usage:
***** spell class container which takes spell-func, spell name, visibility conditions
***** spell api add wraps CmdMap.addIf => foreach s in spells: if s.canUse( mob ): mob.cmdMap.addCmd( s.cmd, s.callback )
***** this system looks conspicuously like the generic Command container 
*** perhaps permissions allows for indexing/organizing of addIf bool funcs => what value ??
** after analysis, it's looking like we don't need a centralized perms service, so much as well-architected subcomponents

* subcomponents
** SafeBlock
*** doesn't really belong in this file, but Command could use it
*** a simple factory which
**** takes a function f
**** returns a wrapper
**** the wrapper forwards all parameters to f
**** but jails f in try/catch/logging/alarms to avoid crashing the app
*** allows others to code systems/commands/procs without crashing the app
** Command container
*** cmd - list of aliases
*** allowGroups - if a mob has any of these groups, they can use the command
*** denyGroups  - if a mob has any of these groups, they cannot use the command.
**** overrides allowGroups
**** useful for stuff like freezing, not that we'll freeze people.
*** bool addCondition( mob ) - returns true if the mob is eligible to access the command
**** processes allowGroups, denyGroups
**** as well as custom functionality
*** useCondition - a wrapper for callback which encapsulates the workflow to check if this command succeeds.
**** twisted deferred callbacks/errbacks are an excellent implementation alternative
**** parameter checking 'telepath what player?'
**** condition checking 'insufficient mana', 'you aren't holding the correct focus item'
*** actual callback
*** root callback - a wrapper that looks like: if ( useCondition( ... ) ): actualCallback( ... )
**** in terms of twisted, this is the is a function that can be added to CmdMap, which launches the deffered sequence
**** can also automatically wrap the command in a safeblock
*** ? what parts of command are data driven:
**** parts of the useCondition, such as player level?
**** since groups are entirely in db, we want to src allowGroups and denyGroups from db, therefore commands scale per-cmd in db
**** is there anything else we want to put in db on a per-command basis?
** groups system mud.core.groups
*** who are groups assigned to?
**** players
**** mobs
*** what sort of segregation do we want between groups of differing permanence, system/userland, rpg/tech, etc:
**** e.g. purge-group, restart-group, god-level-5-group
**** e.g. builder-group
**** e.g. clan-20-group, engineer-group, hero-group
**** group system should vend group collections
**** allows us to separate app-level groups from engine-level groups and game-level groups
*** group use cases
**** leaf-node groups allow direct access to commands, subcommands, or classes of data
***** mud-admin => restart, shutdown
***** player-admin => purge
***** mob-viewer => mob view
***** mob-admin  => mob create
***** zone-13 => edit rooms, mobs in zone 13
**** internal-node 'virtual' groups aggregate leaf-node groups into roles
***** should never be used in an actual command => possibly hard-enforce this in group system
***** builder => mob-viewer, item-viewer, room-viewer, build-core. you would then add zone-XX manually to the assignee
***** 140-god => mud-admin, player-admin
**** what about groups for setting groups?
***** you want to allow a middle manager to add group zone-13 to jim
***** but do not want to allow middle manager to add group mud-admin to themself or jim
***** architect this into group API
****** e.g. createGroup( creator, groupName, controllerGroup /* the group you need to modify this group */, concrete=true /* i.e. not virtual */ )
****** and createGroup() is hardcoded to require the creator to be in the group group-creator.
***** we probably don't even want all groups to be visible to everybody: but we get this for free with group collections
**** unless we want groups to be entirely hardcoded, we'll need data-driven groups infrastructure
***** likely do not want hardcoded. need to touch code to change anything.
***** players only exist in data, and we want to modify their groups, so already some group stuff has to be in data
***** probably anything that has a set of groups, or touches groups, should be in data
***** so a command needs a list of groups in db, etc
**** groups must vend an anonymous groups tracking system
***** e.g. my command's allowGroups are 1, 3, 7
***** e.g. my zone's builder group is zone-37
***** but groups must not know about how its customers choose to organize their use cases
***** requires some kind of ( group_id, group_repository_id /* e.g. app-level group */, customer_id, group_category_id /* category id as defined by customer, anonymous to groups */ ) table
***** what about anonymous ( parent_group_id, anon_child_id, relationship_owner, relationship_category )
***** this really comes down to is, to what level do we want to hardcode usage of groups?
****** add/remove mobs from groups online
****** what about online group creation/deletion? use cases?
****** groups, in general, cause different behaviour for the members of the group.
******* do we want to model group relationships online?
******* will these relationships change that often?

* configuration
** what is this? => different instances of the app use different configurations
** use cases
*** database endpoints for everything
*** port the mud runs on    
*** two peer prod instances different sections of the world
*** a beta instance uses beta dbs
*** a prod instance is a building instance
*** a prod instance runs a different type of world, e.g. medlink
*** a prod instance is the "PK" realm, and uses a different player/persistence db

* databases
** possible types/partitioning
*** shared across all beta/prod buildmode/runmode instances "static class"
**** template db: zones, mobs, items.. any non-instance
**** engine groups: mob-viewer, mud-admin
*** shared across a subset of instances representing one game world "world class"
**** player, clan, economy db
**** what-region db: disallows replication for anything that can move between regions
***** this is sort of an adjunct onto persistent mob db
***** what about persistent items... anything that would transition between regions?
***** alternative: no what-region db
****** no persistent db, keep all persistent things attached to the persistent entity
****** when transitioning regions, commit to db, unlock the record, and destroy the memory
****** receiving region locks db and loads record
****** would only have to lock 'root entity'.. i.e. mob
***** can anything besides mobs initiate moves between regions? items can't move themselves! and a tank should be a mob-container?
***** need regionable concept: mob models regionable, transition APIs model regionable, anything modeling regionable can transition
**** persistent mob db would be "world class"
***** players are the only persistent mobs atm
***** armies/pets would be persistent mobs, too
*** unshared per prod instance "region class"
**** specifies which subset of world exists on this instance
**** specifies endpoints which go to/from other regions
*** local persistence "zone class"
**** this is the class of db med doesn't have. resets kill everything in zone
**** we haven't decided on level of persistence yet
*** engine dbs
**** static groups: mob-viewer
*** game dbs
** dbs could vary on at least three dimensions: beta/prod, engine/game, and level of persistence
** idea: don't vary across engine/game; vastly reduces complexity
*** otherwise when you group add newgroup, how do you know what db to put it in?
*** beta/prod variation is transparent
** problem:
*** growing groups linearly with zones could work, because they can all be static groups in a builder db, and not even exist in runmode
*** but there are groups which exist in build mode, which also exist in run mode, and how do we separate those from groups that we don't want to exist in runmode?
*** growing groups linearly with clans has a stronger issue.. doesn't exist in buildmode, and in runmode it's world class not static class.
*** possible solution:
**** static_group_db = "engine_groups" /* beta_ prod_ */
**** world_group_db  = "builder_world_groups" /* beta_ prod_ */
**** world_group_db  = "beta_realm_world_groups" /* beta only */
**** world_group_db  = "jim_realm_world_groups" /* prod only, contains rpg groups for this realm */
**** theme:
***** certain dbs are coupled with buildmode, others with runmode
***** only engine groups are omnipresent: highly static, exist in beta/prod x buildmode/runmode
** therefore *the vast majority of data is only available at the [beta/prod] x [builder/world-instance] level*
** new problem: for what use cases is context necessary to determine if data goes into engine or world db
*** groups - can add engine group, or world group. => use different command for engine group
** use case table:

| data type               constant across: | beta/prod | build/run | world |                                                                            |
|------------------------------------------+-----------+-----------+-------+----------------------------------------------------------------------------|
| clan groups e.g. clan23                  | N         | N         | N     | build mode is regular + build features; so clans, etc work                 |
| mob/item/clan/rpg persistent instances   | N         | N         | N     |                                                                            |
| instance data                            | N         | N         | N     | rpg instances, rpg groups                                                  |
|                                          | N         | Y         | N     | this configuration can't exist                                             |
| builder zone groups                      | N         | N         | Y     | builder zone groups don't exist in run, and there's only one builder world |
| mob/zone/item/room templates             | N         | Y         | Y     |                                                                            |
|                                          | Y         | N         | Y     | this configuration can't exist                                             |
| engine groups                            | Y         | Y         | Y     |                                                                            |
| spells                                   | Y         | Y         | Y     | spells aren't in db                                                        |









* database impl
** use cases
*** returns a database name formatted as a universal database
*** returns a database name formatted as a world database
** tests
*** I can set the universe
*** I can set the world
*** db prefix must be a string
*** db world must be a string
*** a universal db != world db
** interface
*** db.type { STATIC, INSTANCE }
*** WORLD
*** setPrefix( string )
*** setInstance( string )
*** getInstanceDB( name, 


